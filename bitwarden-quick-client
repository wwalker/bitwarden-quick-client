#!/bin/bash -ex

# Bitwarden Quick Client
# https://github.com/wwalker/bitwarden-quick-client
# Released under the GPL v2

# Return true is BW_DEBUG si set (to non-zero)
_bw_is_debug(){
[[ -n "$BW_DEBUG" ]] && [[ "$BW_DEBUG" != "0" ]]
}

# turn on tracing, if debug
_bw_is_debug && set -x
# set +x for when you want debug logging, but not tracing

BEEP=${BEEP:-beep}

_bw_log(){
  # shellcheck disable=SC2059
  printf "$@" 1>&2
}

_bw_debug_log(){
  _bw_is_debug && _bw_log "$@"
  return 0
}

_bw_die(){
  printf "%s\n" "$*"
  printf "Exiting.\n"
  exit 1
}

_bw_copy_to_clipboard(){
  local value
  value=$1

  if [[ "$( uname -o )" == "Darwin" ]]
  then
    printf "%s" "$1" | tr -d '\r\n' | pbcopy
  else
    printf "%s" "$1" | tr -d '\r\n' | xclip -i -selection primary
    printf "%s" "$1" | tr -d '\r\n' | xclip -i -selection clipboard
  fi
}

bw_save_session_id(){
  export BW_SESSION="$1"
  printf "%s" "$1" > "$BW_RUNDIR"/session_id
}

bw_load_session_id(){
  session_id_file=$BW_RUNDIR/session_id
  [[ -s $session_id_file ]] || return 0
  BW_SESSION=$( cat "$session_id_file" )
  export BW_SESSION
}

bw_load_last_unlocked(){
  local filename
  bw_last_unlocked=0

  filename="$BW_RUNDIR/bw_last_unlocked"
  [[ -s $filename ]] && bw_last_unlocked=$( cat "$filename" )
  return 0
}

bw_set_last_unlocked(){
  bw_last_unlocked=$EPOCHSECONDS
  printf "%s" "$EPOCHSECONDS" > "$BW_RUNDIR"/bw_last_unlocked
}

bw_recently_unlocked(){
  [[ -z "$bw_last_unlocked" ]] && return 1
  local now
  now=$( date +%s )
  (( $(( now - bw_last_unlocked )) <= 300 ))
}

bw_login(){
  local session

  [[ -z "$BW_SESSION" ]] && bw_load_session_id
  bw_recently_unlocked || bw_load_last_unlocked
  bw_recently_unlocked && return 0

  _bw_interactive_cmd=bw
  { [[ -z $(tty) ]] || [[ "not a tty" = "$(tty)" ]]; } && _bw_interactive_cmd=bw_run_in_terminal

  # if we are unlocked, then we are also logged in ... Nirvana
  bw unlock --check 1>&2 && bw_set_last_unlocked && return 0

  bw logout

  # if bw login --check 1>&2
  # then
  #   # We are logged in but locked; so, we have to manually unlock
  #   session=$( $_bw_interactive_cmd unlock --raw ) || { _bw_log "Unlock failed: <%s>\n" "$session"; return 1; }
  # else
  #   # We are not even logged in, get our login if it's not provided
    [[ -z "$BW_EMAIL" ]] && read -r -t 20 -p 'Enter your login to lastpass: ' BW_EMAIL
    [[ -z "$BW_EMAIL" ]] && return 1

    session=$( $_bw_interactive_cmd login "$BW_EMAIL" --raw ) || { _bw_log "login failed"; return 1; }
  # fi

  # We either unlocked or logged in, save the session
  bw_last_unlocked=$( date +%s );
  bw_save_session_id "$session"
}

bw_generate(){
  bw generate -luns --length 24
}

bw_create(){
  name="$1"
  url="$2"
  user="$3"

  pass="$( bw generate -luns --length 24 )"
  creation_date="$( date '+%FT%TZ' )"

  # uuid="$( uuidgen )"
  # "id": "$uuid",
  cat > /tmp/bw_create.$$.json <<EOF
{
  "object": "item",
  "organizationId": null,
  "folderId": null,
  "type": 1,
  "name": "$name",
  "notes": "",
  "favorite": false,
  "login": {
    "uris": [
      {
        "match": null,
        "uri": "$url"
      }
    ],
    "username": "$user",
    "password": "$pass",
    "totp": null,
    "passwordRevisionDate": null
  },
  "collectionIds": [],
  "revisionDate": "$creation_date"
}
EOF
  vim /tmp/bw_create.$$.json
  bw encode < /tmp/bw_create.$$.json | bw create item
  /bin/rm /tmp/bw_create.$$.json
}

bw_edit(){
  if [[ -z $(tty) ]] || [[ "not a tty" = "$(tty)" ]]
  then
    printf "No tty available, exiting\n"
    return 1
  fi

  bw_login

  bw get item "$1" | jq . > /tmp/bw_edit.$$.json
  vim /tmp/bw_edit.$$.json
  bw encode < /tmp/bw_edit.$$.json | bw edit item "$1"
  /bin/rm /tmp/bw_edit.$$.json
}

bw_ls(){
  local a=.
  bw_login || return 1
  (( $# != 0 )) && a=$1
  bw list items | jq -r '.[]|"\(.id) \(.name) \(.login.username) \(.login.uris[0].uri)"' | egrep "$a"
}

bw_show(){
  #for i in $( bw_ls "$@" | sed -e 's/.*\[id: //' -e 's/\]//' )
  for i in $( bw_ls "$@" | awkcol 1 )
  do
    _bw_debug_log "%s\n" "$i"
    bw get item "$i"
  done | jq .
}

bw_get_selection(){
  local filter

  [[ -f $BW_RUNDIR/last-filter ]] && filter="-filter $( cat "$BW_RUNDIR"/last-filter )"
  _bw_debug_log "filter: %s\n" "$filter"

  [[ -n "$1" ]] && [[ "$1" != '.' ]] && filter="$1"

  # shellcheck disable=SC2086
  printf "%s" "$ids" | $_bw_fuzzy_selector -matching regex -dmenu -format 'F:s' $filter
}

bw_main(){
  bw_login

  pattern=${1:-.}
  ids=$( bw_ls "$pattern" )

  # shellcheck disable=SC2086
  selection=$( bw_get_selection )
  _bw_debug_log "selection: <%s>\n" "$selection"

  filter=${selection%%\':*}
  _bw_debug_log "filter: <%s>\n" "$filter"

  filter=${filter#\'}
  _bw_debug_log "filter: <%s>\n" "$filter"

  printf "%s\n" "$filter" > "$BW_RUNDIR"/last-filter

  id=${selection#*:}
  _bw_debug_log "id:\t<%s>\n" "$id"
  id=${id%% *}
  _bw_debug_log "id:\t<%s>\n" "$id"

  _bw_is_debug && env | grep BW
  if [[ "$id" ]]
  then
    local value
    value=$( bw get "$lookingFor" "$id" )
    xdotool type --clearmodifiers "$value"
  fi
  [[ "$lookingFor" = "password" ]] && $BEEP
}

bwurl(){
  lookingFor=uri
  bw_main "$@"
}

bwuser(){
  lookingFor=username
  bw_main "$@"
}

bwpass(){
  lookingFor=password
  bw_main "$@"
}

bw-pass(){ bwpass "$@"; }
bw-user(){ bwuser "$@"; }
bw-url() { bwurl  "$@"; }

bw_pass(){ bwpass "$@"; }
bw_user(){ bwuser "$@"; }
bw_url() { bwurl  "$@"; }

bw_status(){
  local status

  status=$( bw status | jq -r .status ) || return 1

  case $status in
    unlocked)
      return 0
      ;;
    locked)
      printf "locked\n"
      return 2
      ;;
    unauthenticated)
      printf "unauthenticated\n"
      return 3
      ;;
    *)
      printf "UNEXPECTED ERROR : %s\n" "$status"
      return 4
      ;;
  esac
}

bw_in_terminal(){
  pid=$1
  shift

  set +e
  "$@" 2>&1 > /tmp/out."$pid" | tee /tmp/err."$pid"
  echo $? > /tmp/rc."$pid"
}

bw_run_in_terminal(){
  xterm -e "$_basename" in-terminal $$ bw "$@"
  rc=$(cat /tmp/rc.$$)
  [[ "$rc" = "0" ]] || cat /tmp/err.$$
  cat /tmp/out.$$
  exit "$rc"
}

# Hardcoded
_bw_fuzzy_selector=rofi
BW_RUNDIR="/run/user/$UID/bw/"

_basename=$( basename -- "$0" )

_bw_debug_log "%s\n" "${BASH_SOURCE[0]}"  "${0}"

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  _bw_debug_log "script ${BASH_SOURCE[0]} is being executed ...\n"

  mkdir -p $BW_RUNDIR || _bw_die "Failed to 'mkdir %s'. Cannot continue\n"

  # special case to open a terminal when there is no TTY available yet
  # the bw command being called requires a TTY
  if [[ "$1" = "in-terminal" ]]
  then
    shift
    bw_in_terminal "$@"
    exit $?
  fi

  # Run the function name passed on the command line
  # Sure hope you called an existing function....
  "$@"
else
  _bw_debug_log "script ${BASH_SOURCE[0]} is being sourced ...\n"
  mkdir -p $BW_RUNDIR || _bw_log "Failed to 'mkdir %s'. Most likely, the functions just created will not work.\n"
fi
# turn off tracing, if debug
_bw_is_debug && set +x
